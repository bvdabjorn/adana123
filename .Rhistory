ggplot.hist(data_train, data_train$weight, "weight")
ggplot.bar(data_train, data_train$pixels_x,"pixels_x")
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$storage, "storage")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$cpu, "cpu")
ggplot.bar(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.bar(data_train, data_train$gpu, "gpu")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$threading, "threading")
?round
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = round( (..count..)/sum(..count..), digits = 4 ) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = round( (..count..)/sum(..count..), digits = 4) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 2) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 4) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
?geom_bar
?aes
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
KULbg <- "#116E8A"
Kleur <- "#0404B4"
## ---- indeeddotcom, echo = F, fig.align = 'center', fig.width = 10, fig.height = 4.5, dev = "svg"----
# The popularity data (by Katrien on Jan 12, 2020 via indeed.com)
pop_df <-
data.frame(
lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
n_jobs = c(80329, 71894, 51865, 24355, 11710, 3497, 1874),
free = c(T, T, T, F, F, F, F)
)
## Plot it
pop_df %>%
mutate(lang = lang %>% factor(ordered = T)) %>%
ggplot(aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
labs(
title = "Comparing statistical languages",
subtitle = "Number of job postings on Indeed.com, 2020/01/12"
) +
scale_fill_manual(
"Free?",
labels = c("True", "False"),
values = c("#116E8A", "slategray")
) +
ggthemes::theme_pander(base_size = 17) +
# theme_ipsum() +
theme(legend.position = "bottom")
reorder(lang, -n_jobs)
pop_df <-
data.frame(
lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
n_jobs = c(80329, 71894, 51865, 24355, 11710, 3497, 1874),
free = c(T, T, T, F, F, F, F)
reorder(lang, -n_jobs)
?reorder
data_train$cpu_core
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = reorder(data_train$cpu_core, c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = reorder(data_train$cpu_core, c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c(" ","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("NULL","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c(NULL,"DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
levels(data_train$cpu_core)
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 4) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$threading, "threading")
ggplot.bar(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.bar(data_train, data_train$gpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$gpu_brand, "gpu_brand")
ggplot.point(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.bar(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 50) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 40) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 30) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 25) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.point(data_train, data_train$brand, "brand")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point(data_train, data_train$pixels_x, "pixels_x")
ggplot.point(data_train, data_train$pixels_y, "pixels_y")
ggplot.point(data_train, data_train$screen_surface, "screen_surface")
ggplot.point(data_train, data_train$touchscreen, "touchscreen")
ggplot.point(data_train, data_train$cpu, "cpu")
ggplot.point(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.point(data_train, data_train$gpu, "gpu")
ggplot.point(data_train, data_train$os, "os")
ggplot.point(data_train, data_train$os_details, "os_details")
ggplot.point(data_train, data_train$ram, "ram")
ggplot.point(data_train, data_train$ssd, "ssd")
ggplot.point(data_train, data_train$storage, "storage")
ggplot.point(data_train, data_train$weight, "weight")
ggplot.point(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.point(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.point(data_train, data_train$gpu_brand, "gpu_brand")
ggplot.point(data_train, data_train$gpu_type, "gpu_type")
ggplot.point(data_train, data_train$os_details_2, "os_details_2")
ggplot.point(data_train, data_train$cpu_details_2, "cpu_details_2")
ggplot.point(data_train, data_train$pixel, "pixel")
##################################################################
#Correlaties en rest met volledige trainingset
data_trainfull <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
View(data_trainfull)
#correlatie
cor(data_trainfull$pixels_x,data_trainfull$pixels_y)
cor(data_trainfull$ssd,data_trainfull$storage)
?jitter
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) + jitter(variable, factor = 0.5)
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
#ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) + jitter(variable, factor = 0.5)
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
?aes
ggplot.point <- function(DT, variable, xlab){
ggplot.point <- function(DT, variable, xlab){
ggplot.point <- function(DT, variable, xlab){
ggplot.point <- function(DT, variable, xlab){
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, color = "red")) +
#ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, colour = "red")) +
#ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, col = "red")) +
#ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, col = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, colour = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, colour = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
#ggplot(data_train, aes(variable, max_price)) +
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
ggplot(data_train, aes(variable, max_price)) +
geom_point(col=blue) + labs(x=xlab) + jitter(variable, factor = 0.5)
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) + jitter(variable, factor = 0.5)
theme_bw()
}
#ggplot(data_train, aes(variable, max_price)) +
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
#ggplot(data_train, aes(variable, max_price)) +
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point(data_train, data_train$pixels_x, "pixels_x")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$brand, "brand")
ggplot.bar(data_train, data_train$screen_size,"screen_size")
stop
break
return()
cancel
stop
cancel
print("job")
gds
-
)
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, col = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, color = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, colour = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, col = "red")) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price, col = "red")) +
labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
ggplot(data_train, aes(variable, max_price))
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
ggplot(data_train, aes(variable, max_price)) +
geom_point(col=red)
}
ggplot.point(data_train, data_train$brand, "brand")
red <- "#CC0000"
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
ggplot(data_train, aes(variable, max_price)) +
geom_point(col=red)
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
ggplot.point(data_train, data_train$pixels_x, "pixels_x")
cor(data_trainfull$screen_surface, data_trainfull$touchscreen)
cor(data_trainfull$pixels_x, data_trainfull$screen_size)
View(data_trainfull)
cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard)
?cor
cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard, na.rm = T)
cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard, use = "complete.obs")
cor(ram, discrete_gpu)
cor(touchscreen, detachable_keyboard, use = "complete.obs")
cor(ram, touchscreen)
cor(pixels_x, screen_size)
cor(discrete_gpu, gpu_benchmark)
cor(discrete_gpu, cpu_benchmark)
cor(gpu_benchmark, cpu_benchmark)
cor(cpu_GHZ, cpu_benchmark)
cor(threading, cpu_benchmark)
cor(threading, cpu_GHZ)

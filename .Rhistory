data_train <- read.csv('train.csv', header = TRUE)
data_test <- read.csv('test.csv', header = TRUE)
View(data_test)
View(data_train)
View(data_train)
length(data_train)
nrow(data_train)
ncol(data_train)
?as.factor
str(data_train)
?na.action
?rowSums
missing_data <- data_train[is.na(data_train), ]
View(missing_data)
missing_data <- data_train[rowSums(is.na(data_train)) > 0, ]
missing_data <- data_train[rowSums(is.na(data_train)) > 0, ]
View(missing_data)
missing_data <- data_train[is.na(data_train) > 0, ]
data <- data.frame(c(1,2,3), c(1,2,3))
View(data)
?data.frame
rowSums(data)
rm(data)
is.na(data_train)
testdat <- is.na(data_train)
View(testdat)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
missing_data <- data_train[rowSums(is.na(data_train)) > 0,]
View(missing_data)
#Create dataframe with all entries which have missing values
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
nrow(missing_data_train)
str(data_train)
is.factor(data_train$screen_surface)
?factor
data_train$screen_size <- tolower(data_train$screen_surface)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
data_train$screen_surface <- tolower(data_train$screen_surface)
data_train$brand <- tolower(data_train$brand)
data_train <- tolower(data_train)
data_train <- tolower(data_train[,])
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
data_train <- low(c(data_test))
data_train <- tolower(c(data_test))
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
data_train$gpu <- tolower(data_train$gpu)
library(tidyverse)
library(dplyr)
data_train <- data_train %>% mutate(tolower())
data_train <- data_train %>% mutate(tolower([,]))
?apply
data_train <- apply(data_train, 2, FUN = tolower())
data_train <- apply(X = data_train, 2, FUN = tolower())
str(data_train)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
data_train <- apply(X = data_train, 2, FUN = tolower())
data_train <- apply(X = data_train, 2, FUN = tolower)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA') )
data_test <- read.csv('test.csv', header = TRUE)
#Make everything lowercase
data_train <- apply(X = data_train, 2, FUN = tolower)
#Create dataframe with all entries that have missing values (26 missing data entries)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
str(data_train)
str(data_train)
#Make everything lowercase
data_train <- data.frame(apply(X = data_train, 2, FUN = tolower))
str(data_train)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA'))
data_test <- read.csv('test.csv', header = TRUE)
data_train$screen_surface <- tolower(data_train$screen_surface)
data_train$brand <- tolower(data_train$brand)
str(data_train)
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA'))
str(data_train)
?factor
?read.csv
levels(data_train$screen_surface) <- tolower(levels(data_train$screen_surface))
str(data_train)
levels(data_train$brand) <- tolower(levels(data_train$brand))
str(data_train)
?factor
labels(data_train$screen_surface) <- levels(data_train$screen_surface)
#Correct levels for upper- and lowercase used in dataset
levels(data_train$screen_surface) <- tolower(levels(data_train$screen_surface))
data_train <- read.csv('train.csv', header = TRUE, na.strings = c('','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Correct levels for upper- and lowercase used in dataset
levels(data_train$screen_surface) <- tolower(levels(data_train$screen_surface))
levels(data_train$brand) <- tolower(levels(data_train$brand))
#Create dataframe with all entries that have missing values (26 missing data entries)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
str(data_train)
?apply
apply(data_train$cpu, 1, strsplit(''))
new <- strsplit(data_train, ' ')
new <- strsplit(data_train$cpu, ' ')
new <- strsplit(character(data_train$cpu), ' ')
install.packages('gsub')
install.packages('stringr')
install.packages("stringr")
library(stringr)
x <- word(data_train, 1)
?word
str(data_train$cpu)
x <- word(data_train$cpu, 1)
data_train$cpu_brand <- stringr::word(data_train$cpu, 1)
data_train$cpu_type <- stringr::word(data_train$cpu, 2)
data_train$cpu_type <- stringr::word(data_train$cpu, 2) + stringr::word(data_train$cpu, 3)
data_train$cpu_type <- stringr::word(data_train$cpu, 2) +
x <- stringr::word(data_train$cpu, 3)
x <- stringr::word(data_train$cpu, 3)
str(x)
x <- str_sub(data_train$cpu, start = '\\s')
x
?str_sub
w <- str_c(x, y)
y <- stringr::word(data_train$cpu, 3)
x <- stringr::word(data_train$cpu, 2)
w <- str_c(x, y)
w <- str_c(x, y)

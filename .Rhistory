View(data_no_missing)
data_no_missing = data_train[-(missing_data_train$X-1),]
leegmodel <- lm(min_price ~ 1, data=data_no_missing)
leegmodel
BIC(leegmodel)
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
volmodel <- lm(min_price ~ (brand + screen_size + pixels_x + pixels_y + screen_surface + touchscreen + cpu + detachable_keyboard + discrete_gpu + gpu + os + os_details + ram + ssd + storage + weight + cpu_brand + cpu_type_name + gpu_brand + gpu_type + os_details_2 + cpu_details_2), data=data_no_missing)
volmodel
BIC(volmodel)
summary(volmodel)
options(na.action="na.fail")
options(na.action = "na.omit")
stepboth = stepAIC(leegmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
stepboth = stepAIC(ssdmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
?stepAIC
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
BIC(volmodel)
summary(volmodel)
stepboth = stepAIC(ssdmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
BIC(ssdmodel)
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
data_no_missing = data_train[-(missing_data_train$X-1),]
leegmodel <- lm(min_price ~ 1, data=data_no_missing)
leegmodel
BIC(leegmodel)
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
BIC(ssdmodel)
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
summary(volmodel)
stepboth = stepAIC(volmodel, k=log(nrow(data_no_missing)), direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
install.packages("MASS")
library(MASS)
stepAIC(volmodel, k=log(nrow(data_no_missing)), direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
BIC(volmodel)
View(data_no_missing)
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Create dataframe with all entries that have missing values (26 missing data entries based on original dataset)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
View(missing_data_train)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = xlab)
}
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$storage, "storage")
#correlatie
cor(pixels_x,pixels_y)
cor(ssd,storage)
data_no_missing = data_train[-(missing_data_train$X-1),]
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
summary(ssdmodel)
screensurfacemodel <- lm(min_price ~ screen_surface, data = data_no_missing)
summary(screensurfacemodel)
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.bar(data_train, data_train$pixels_x,"pixels_x")
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$gpu_benchmark, "gpu_benchmark")
#
mean(gpu_benchmark)
?mean
#
mean(gpu_benchmark, na.rm = TRUE)
gpu_benchmark1 = data_train[which(data_train$discrete_gpu=="1"),]
gpu_benchmark0 = data_train[which(data_train$discrete_gpu=="0"),]
gpu_benchmark1 = data_train[which(data_train$discrete_gpu=="1"),]
mean(gpu_benchmark0, na.rm = TRUE)
View(gpu_benchmark1)
mean(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark, na.rm = TRUE)
#
mean(gpu_benchmark, na.rm = TRUE)
#
mean(gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Create dataframe with all entries that have missing values (26 missing data entries based on original dataset)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = xlab)
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$gpu, "gpu")
ggplot.bar(data_train, data_train$detachable_keyboard, "detachable_keyboard")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu, "cpu")
ggplot.bar(data_train, data_train$brand, "brand")
ggplot.bar(data_train, data_train$screen_size,"screen_size")
ggplot.bar(data_train, data_train$pixels_x,"pixels_x")
ggplot.bar(data_train, data_train$pixels_y, "pixels_y")
rlang::last_error()
ggplot.bar(data_train, data_train$cpu_details_2, "cpu_details_2")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$brand, "brand")
ggplot.bar(data_train, data_train$screen_surface, "screen_surface")
ggplot.bar(data_train, data_train$touchscreen, "touchscreen")
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 30) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 15) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 15) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
?geom_histogram
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, binwidth = 0.5) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, binwidth = 0.5) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, binwidth = 0.25) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, binwidth = 0.4) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, binwidth = 0.5) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bin = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.bar(data_train, data_train$detachable_keyboard, "detachable_keyboard")
?count
count(data_train$detachable_keyboard)
sum(data_train$detachable_keyboard)
ggplot.bar(data_train, data_train$brand, "brand")
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.bar(data_train, data_train$pixels_x,"pixels_x")
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$storage, "storage")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$cpu, "cpu")
ggplot.bar(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.bar(data_train, data_train$gpu, "gpu")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$threading, "threading")
?round
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = round( (..count..)/sum(..count..), digits = 4 ) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = round( (..count..)/sum(..count..), digits = 4) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 2) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 4) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
?geom_bar
?aes
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
KULbg <- "#116E8A"
Kleur <- "#0404B4"
## ---- indeeddotcom, echo = F, fig.align = 'center', fig.width = 10, fig.height = 4.5, dev = "svg"----
# The popularity data (by Katrien on Jan 12, 2020 via indeed.com)
pop_df <-
data.frame(
lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
n_jobs = c(80329, 71894, 51865, 24355, 11710, 3497, 1874),
free = c(T, T, T, F, F, F, F)
)
## Plot it
pop_df %>%
mutate(lang = lang %>% factor(ordered = T)) %>%
ggplot(aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
labs(
title = "Comparing statistical languages",
subtitle = "Number of job postings on Indeed.com, 2020/01/12"
) +
scale_fill_manual(
"Free?",
labels = c("True", "False"),
values = c("#116E8A", "slategray")
) +
ggthemes::theme_pander(base_size = 17) +
# theme_ipsum() +
theme(legend.position = "bottom")
reorder(lang, -n_jobs)
pop_df <-
data.frame(
lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
n_jobs = c(80329, 71894, 51865, 24355, 11710, 3497, 1874),
free = c(T, T, T, F, F, F, F)
reorder(lang, -n_jobs)
?reorder
data_train$cpu_core
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = reorder(data_train$cpu_core, c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = reorder(data_train$cpu_core, c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c(" ","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("NULL","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c(NULL,"DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
levels(data_train$cpu_core)
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(round(variable, digits = 4) ))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.bar(data_train, data_train$cpu_core, "cpu_core")
ggplot.bar(data_train, data_train$threading, "threading")
ggplot.bar(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.bar(data_train, data_train$gpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$gpu_brand, "gpu_brand")
ggplot.point(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.bar(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.bar(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 50) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 40) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 30) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 25) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.hist(data_train, data_train$weight, "weight")
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist(data_train, data_train$weight, "weight")

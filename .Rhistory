View(data_test)
View(data_train)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
pairs(~min_price+max_price+brand)
pairs(~min_price+max_price)
pairs(~min_price*max_price)
str(data_train)
levels(data_train$os_details_2)
install.packages('fastDummies')
x <- fastDummies::dummy_cols(data_train$os_details_2)
x
View(x)
View(x)
str(data_train$os_details_2)
factor(data_train$os_details_2)
x <- as.numeric(as.character(data_train$os_details_2))
x
levels(data_train$os_details_2)
str(os_details_2)
x <- dummy_cols(os_details_2)
x <- fastDummies::dummy_columns(data_train$os_details_2)
View(x)
?factor
x <- as.numeric(data_train$os_details_2)
x
#Dataframe for neural network (test approach)
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface))
View(net_data)
#Dataframe for neural network (test approach)
net_data <- data_frame(brand <- as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface))
#Dataframe for neural network (test approach)
net_data <- data_frame(as.numeric(data_train$brand)$brand, data_train$screen_size, as.numeric(data_train$screen_surface))
?data_frame
#Combine pixelinformation
data_train$pixel = data_train$pixels_x*data_train$pixels_y
#Dataframe for neural network (test approach)
#Check for discreet GPU variable !
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface), data_train$pixel,
data_train$touchscreen, data_train$detachable_keyboard, as.numeric(data_train$os), as.numberic(data_train$os_details_2),
data_train$ram, data_train$ssd, data_train$storage, data_train$weight, as.numeric(data_train$cpu_brand), as.numeric(data_train$cpu_type_name),
as.numeric(data_train$cpu_details_2), as.numberic(data_train$gpu_brand), as.numeric(data_train$gpu_type), data_train$min_price, data_train$max_price)
#Dataframe for neural network (test approach)
#Check for discreet GPU variable !
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface), data_train$pixel,
data_train$touchscreen, data_train$detachable_keyboard, as.numeric(data_train$os), as.numeric(data_train$os_details_2),
data_train$ram, data_train$ssd, data_train$storage, data_train$weight, as.numeric(data_train$cpu_brand), as.numeric(data_train$cpu_type_name),
as.numeric(data_train$cpu_details_2), as.numberic(data_train$gpu_brand), as.numeric(data_train$gpu_type), data_train$min_price, data_train$max_price)
#Dataframe for neural network (test approach)
#Check for discreet GPU variable !
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface), data_train$pixel,
data_train$touchscreen, data_train$detachable_keyboard, as.numeric(data_train$os), as.numeric(data_train$os_details_2),
data_train$ram, data_train$ssd, data_train$storage, data_train$weight, as.numeric(data_train$cpu_brand), as.numeric(data_train$cpu_type_name),
as.numeric(data_train$cpu_details_2), as.numeric(data_train$gpu_brand), as.numeric(data_train$gpu_type), data_train$min_price, data_train$max_price)
#Dataframe for neural network (test approach)
#Check for discreet GPU variable !
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface), data_train$pixel,
data_train$touchscreen, data_train$detachable_keyboard, as.numeric(data_train$os), as.numeric(data_train$os_details_2),
data_train$ram, data_train$ssd, data_train$storage, data_train$weight, as.numeric(data_train$cpu_brand), as.numeric(data_train$cpu_type_name),
as.numeric(data_train$cpu_details_2), as.numeric(data_train$gpu_brand), as.numeric(data_train$gpu_type), data_train$min_price, data_train$max_price)
x <- c('brand', 'screen_size', 'screen_surface', 'pixels', 'touchscreen', 'detachable_keyboard', 'os', 'os_details', 'ram', 'ssd', 'storage', 'weight',
'cpu_brand', 'cpu_type', 'cpu_details', 'gpu_brand', 'gpu_type', 'min_price', 'max_price')
names(net_data) <- x
install.packages("fastDummies")
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Create dataframe with all entries that have missing values (26 missing data entries based on original dataset)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
#Combine pixelinformation
data_train$pixel = data_train$pixels_x*data_train$pixels_y
#Dataframe for neural network (test approach)
#Check for discreet GPU variable !
net_data <- data_frame(as.numeric(data_train$brand), data_train$screen_size, as.numeric(data_train$screen_surface), data_train$pixel,
data_train$touchscreen, data_train$detachable_keyboard, as.numeric(data_train$os), as.numeric(data_train$os_details_2),
data_train$ram, data_train$ssd, data_train$storage, data_train$weight, as.numeric(data_train$cpu_brand), as.numeric(data_train$cpu_type_name),
as.numeric(data_train$cpu_details_2), as.numeric(data_train$gpu_brand), as.numeric(data_train$gpu_type), data_train$min_price, data_train$max_price)
x <- c('brand', 'screen_size', 'screen_surface', 'pixels', 'touchscreen', 'detachable_keyboard', 'os', 'os_details', 'ram', 'ssd', 'storage', 'weight',
'cpu_brand', 'cpu_type', 'cpu_details', 'gpu_brand', 'gpu_type', 'min_price', 'max_price')
names(net_data) <- x
View(net_data)
View(net_data)
View(data_test)
View(net_data)
View(data_train)
library(tidyverse)
library(dplyr)
library(stringr)
library(ggplot2)
library(corrr)
library(ggcorrplot)
install.packages("corrr")
install.packages("ggcorrplot")
library(corrr)
library(ggcorrplot)
attach(data_train)
attach(data_train)
pricerange <- max_price - min_price
pricerange
blue <- "#1E90FF"
?cbind
?fic
install.packages("fic")
?fic
library(fic)
?fic
pricerange
#Let's add another column to the data: pricerange
pricediff <- max_price - min_price
pricediff
rbind(data_train,pricediff)
warnings()
View(data_train)
plot1 <- ggplot(data_train, aes(ram)) + theme_bw() +
geom_bar(col = blue, fill = blue) +
labs(y = "Abs frequency") +
ggtitle("Frequency")
plot1
plot2 <- ggplot(data_train, aes(ram, min_price)) +
geom_point() +
theme_bw()
plot2
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5)
}
ggplot.bar(data_train, data_train$brand, "ram")
ggplot.bar <- function(DT, variable){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = )
}
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) +
theme_bw()
}
ggplot.bar(data_train, data_train$brand, "ram")
ggplot.bar(data_train, data_train$brand)
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = "variable" )
ggplot.bar(data_train, data_train$brand)
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency")
ggplot.bar <- function(DT, variable){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency")
}
ggplot.bar(data_train, data_train$brand)
toString(data_train$brand)
"data_train$brand"
name(data_train$brand)
#CORRELATIE corr
data_train %>% correlate() %>% network_plot(min_cor=0.6)
#CORRELATIE corr
data_train %>% correlate() %>% network_plot(min_cor=0.6)
#CORRELATIE ggcorrplot
ggcorrplot(cor(mtcars), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
#CORRELATIE ggcorrplot
ggcorrplot(cor(data_train), p.mat = cor_pmat(data_train), hc.order=TRUE, type='lower')
attach(data_train)
Basiscomponentenmodel <- lm(min_price ~ screen_size + cpu + gpu + os_details + ram + ssd + storage, data=data_train)
Basiscomponentenmodel
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ cpu_brand + gpu_brand + os_details + ram + ssd + storage, data=data_train)
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ cpu_brand + gpu_brand + ram + ssd + storage, data=data_train)
summary(Basiscomponentenmodel)
install.packages("tidyverse")
install.packages("stringr")
install.packages("corrr")
install.packages("ggcorrplot")
install.packages("gridExtra")
install.packages("vcd")
install.packages("MASS")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
attach(data_train)
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = xlab)
}
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
Basiscomponentenmodel <- lm(min_price ~ screen_size, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$pixels_x, "pixels_x")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x, data=data_train)
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + pixels_y, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$screen_surface, "screen_surface")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + screen_surface, data=data_train)
summary(Basiscomponentenmodel)
stepforward = stepAIC(leegmodel, k=2, direction = "forward", scope=list(lower=~1, upper=~ brand + screen_size + pixels_x + pixels_y + screen_surface + touchscreen + cpu + detachable_keyboard + discrete_gpu + gpu + os + os_details + ram + ssd + storage + weight + cpu_brand + cpu_type_name + gpu_brand + gpu_type + os_details_2 + cpu_details_2 , data=data_train ))
leegmodel <- lm(min_price ~ 1, data=data_train)
leegmodel
stepforward = stepAIC(leegmodel, k=2, direction = "forward", scope=list(lower=~1, upper=~ brand + screen_size + pixels_x + pixels_y + screen_surface + touchscreen + cpu + detachable_keyboard + discrete_gpu + gpu + os + os_details + ram + ssd + storage + weight + cpu_brand + cpu_type_name + gpu_brand + gpu_type + os_details_2 + cpu_details_2 , data=data_train ))
ggplot.point(data_train, data_train$touchscreen, "touchscreen")
ggplot.point(data_train, data_train$screen_surface, "screen_surface")
ggplot.point(data_train, data_train$touchscreen, "touchscreen")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + screen_surface + factor(touchscreen), data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$cpu, "cpu")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + screen_surface + factor(touchscreen) + cpu, data=data_train)
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$discrete_gpu, "discrete_gpu")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + cpu + factor(discrete_gpu), data=data_train)
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$cpu, "cpu")
ggplot.point(data_train, data_train$gpu, "gpu")
ggplot.point(data_train, data_train$os, "os")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + os + cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$os_details, "os_details")
ggplot.point(data_train, data_train$ram, "ram")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + os + ram +cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$ssd, "ssd")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + os + ram + ssd +cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$storage, "storage")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$weight, "weight")
Basiscomponentenmodel <- lm(min_price ~ screen_size + pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + weight + cpu, data=data_train)
summary(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.point(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.point(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.point(data_train, data_train$cpu_brand, "cpu_brand")
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu_brand, data=data_train)
summary(Basiscomponentenmodel)
ggplot.point(data_train, data_train$gpu_type, "gpu_type")
ggplot.point(data_train, data_train$os_details_2, "os_details_2")
ggplot.point(data_train, data_train$cpu_details_2, "cpu_details_2")
ggplot.point(data_train, data_train$pixel, "pixel")
ggplot.point(data_train, data_train$cpu, "cpu")
ggplot.point(data_train, data_train$gpu_type, "gpu_type")
ggplot.point(data_train, data_train$os_details_2, "os_details_2")
ggplot.point(data_train, data_train$cpu_details_2, "cpu_details_2")
ggplot.point(data_train, data_train$os_details_2, "os_details_2")
ggplot.point(data_train, data_train$cpu_details_2, "cpu_details_2")
ggplot.point(data_train, data_train$pixel, "pixel")
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu_brand, data=data_train)
summary(Basiscomponentenmodel)
leegmodel <- lm(min_price ~ 1, data=data_train)
leegmodel
volmodel <- lm(min_price ~ (brand + screen_size + pixels_x + pixels_y + screen_surface + touchscreen + cpu + detachable_keyboard + discrete_gpu + gpu + os + os_details + ram + ssd + storage + weight + cpu_brand + cpu_type_name + gpu_brand + gpu_type + os_details_2 + cpu_details_2), data=data_train)
volmodel
summary(volmodel)
stepforward = stepAIC(leegmodel, k=2, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
library(MASS)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
stepforward = stepAIC(leegmodel, k=2, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward = stepAIC(leegmodel, k=2, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward
stepboth = stepAIC(leegmodel, k=2,direction="both",scope=list(upper=~.,lower=~1))
stepboth
stepforward = stepAIC(leegmodel, k=log(nrow(data_train)), direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward
leegmodel <- lm(min_price ~ 1, data=data_train)
leegmodel$aic
AIC(leegmodel)
AIC(volmodel)
stepboth = stepAIC(leegmodel, k=2,direction="both",scope=list(upper=~.,lower=~1))
stepboth
AIC(leegmodel)
attach(data_train)
ssdmodel <- lm(min_price ~ ssd, data = data_train)
ssdmodel
AIC(ssdmodel)
stepforward = stepAIC(leegmodel, k=log(nrow(data_train)), direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward
stepforward = stepAIC(leegmodel, k=1, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward
stepforward = stepAIC(leegmodel, k=0, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward = stepAIC(ssdmodel, k=0, direction = "forward", scope=list(lower=~1, upper=~. , data=data_train ))
stepforward
stepforward = stepAIC(ssdmodel, k=0, direction = "forward", scope=list(upper=~. , data=data_train, lower=~1 ))
stepforward = stepAIC(ssdmodel, k=0, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
?stepAIC
stepboth = stepAIC(ssdmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
stepboth
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
options(na.action="na.fail")
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
options(na.action = "na.omit")
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
stepboth = stepAIC(leegmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
stepboth
options(na.action="na.fail")
stepboth = stepAIC(leegmodel, k=2, direction = "both", scope=list(upper=~. , data=data_train, lower=~1 ))
stepboth
options(na.action = "na.omit")
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu_brand, data=data_train)
summary(Basiscomponentenmodel)
AIC(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage, data=data_train)
summary(Basiscomponentenmodel)
AIC(Basiscomponentenmodel)
AIC(leegmodel)
AIC(volmodel)
BIC(leegmodel)
BIC(volmodel)
summary(Basiscomponentenmodel)
BIC(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage + cpu_brand, data=data_train)
BIC(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage , data=data_train)
BIC(Basiscomponentenmodel)
Basiscomponentenmodel <- lm(min_price ~ pixels_x + factor(discrete_gpu) + os + ram + ssd + storage +pixels_y , data=data_train)
BIC(Basiscomponentenmodel)
View(missing_data_train)
?remove
data_no_missing = remove(data_train, list= c(1))
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
View(missing_data_train)
data_no_missing = data_train[-c(3,13,24,32,33,109,179,181),]
View(data_no_missing)
list(missing_data_train)
missing_data_train$id
missing_data_train$X
missing_data_train$X+1
data_no_missing = data_train[-(missing_data_train$X-1),]
View(data_no_missing)
data_no_missing = data_train[-(missing_data_train$X-1),]
leegmodel <- lm(min_price ~ 1, data=data_no_missing)
leegmodel
BIC(leegmodel)
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
volmodel <- lm(min_price ~ (brand + screen_size + pixels_x + pixels_y + screen_surface + touchscreen + cpu + detachable_keyboard + discrete_gpu + gpu + os + os_details + ram + ssd + storage + weight + cpu_brand + cpu_type_name + gpu_brand + gpu_type + os_details_2 + cpu_details_2), data=data_no_missing)
volmodel
BIC(volmodel)
summary(volmodel)
options(na.action="na.fail")
options(na.action = "na.omit")
stepboth = stepAIC(leegmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
stepboth = stepAIC(ssdmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
?stepAIC
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
BIC(volmodel)
summary(volmodel)
stepboth = stepAIC(ssdmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
BIC(ssdmodel)
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
stepboth = stepAIC(volmodel, k=2, direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
data_no_missing = data_train[-(missing_data_train$X-1),]
leegmodel <- lm(min_price ~ 1, data=data_no_missing)
leegmodel
BIC(leegmodel)
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
BIC(ssdmodel)
volmodel <- lm(min_price ~ ., data=data_no_missing)
volmodel
BIC(volmodel)
summary(volmodel)
stepboth = stepAIC(volmodel, k=log(nrow(data_no_missing)), direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
install.packages("MASS")
library(MASS)
stepAIC(volmodel, k=log(nrow(data_no_missing)), direction = "both", scope=list(upper=~. , data=data_no_missing, lower=~1 ))
BIC(volmodel)
View(data_no_missing)
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Create dataframe with all entries that have missing values (26 missing data entries based on original dataset)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
View(missing_data_train)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = xlab)
}
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$ssd, "ssd")
ggplot.bar(data_train, data_train$storage, "storage")
#correlatie
cor(pixels_x,pixels_y)
cor(ssd,storage)
data_no_missing = data_train[-(missing_data_train$X-1),]
ssdmodel <- lm(min_price ~ ssd, data = data_no_missing)
ssdmodel
summary(ssdmodel)
screensurfacemodel <- lm(min_price ~ screen_surface, data = data_no_missing)
summary(screensurfacemodel)
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.bar(data_train, data_train$pixels_x,"pixels_x")
ggplot.bar(data_train, data_train$ram, "ram")
ggplot.bar(data_train, data_train$gpu_benchmark, "gpu_benchmark")
#
mean(gpu_benchmark)
?mean
#
mean(gpu_benchmark, na.rm = TRUE)
gpu_benchmark1 = data_train[which(data_train$discrete_gpu=="1"),]
gpu_benchmark0 = data_train[which(data_train$discrete_gpu=="0"),]
gpu_benchmark1 = data_train[which(data_train$discrete_gpu=="1"),]
mean(gpu_benchmark0, na.rm = TRUE)
View(gpu_benchmark1)
mean(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark, na.rm = TRUE)
#
mean(gpu_benchmark, na.rm = TRUE)
#
mean(gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark0$gpu_benchmark, na.rm = TRUE)
mean(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
median(gpu_benchmark1$gpu_benchmark, na.rm = TRUE)
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
library(tidyverse)
library(dplyr)
library(stringr)
library(fastDummies)
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
data_test <- read.csv('test.csv', header = TRUE)
#Create dataframe with all entries that have missing values (26 missing data entries based on original dataset)
missing_data_train <- data_train[rowSums(is.na(data_train)) > 0,]
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)), col = blue, fill = blue, alpha = 0.5) +
labs(y= "Abs frequency", x = xlab)
}
ggplot.bar(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.bar(data_train, data_train$gpu, "gpu")
ggplot.bar(data_train, data_train$detachable_keyboard, "detachable_keyboard")

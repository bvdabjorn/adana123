cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard)
?cor
cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard, na.rm = T)
cor(data_trainfull$touchscreen, data_trainfull$detachable_keyboard, use = "complete.obs")
cor(ram, discrete_gpu)
cor(touchscreen, detachable_keyboard, use = "complete.obs")
cor(ram, touchscreen)
cor(pixels_x, screen_size)
cor(discrete_gpu, gpu_benchmark)
cor(discrete_gpu, cpu_benchmark)
cor(gpu_benchmark, cpu_benchmark)
cor(cpu_GHZ, cpu_benchmark)
cor(threading, cpu_benchmark)
cor(threading, cpu_GHZ)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
blue <- "#1E90FF"
red <- "#CC0000"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
herwerktecpucore <- data_train$cpu_core
str(herwerktecpucore)
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle("cpu_core frequency plot")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x= "Number of cores") +
theme_bw()
}
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) , x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core)), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core)), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE")) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core)), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") + scale_x_discrete(limits = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE"))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core)), x = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE") + scale_x_discrete(limits = c("","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE"))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = data_train, aes(as.factor(data_train$cpu_core))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
herwerktecpucore <- herwerktecpucore[which(herwerktecpucore == ""),]
herwerktecpucore <- herwerktecpucore[which(herwerktecpucore == "DUAL-CORE"),]
herwerktecpucore
summary(herwerktecpucore)
KULbg <- "#116E8A"
Kleur <- "#0404B4"
## ---- indeeddotcom, echo = F, fig.align = 'center', fig.width = 10, fig.height = 4.5, dev = "svg"----
# The popularity data (by Katrien on Jan 12, 2020 via indeed.com)
pop_df <-
data.frame(
lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
n_jobs = c(80329, 71894, 51865, 24355, 11710, 3497, 1874),
free = c(T, T, T, F, F, F, F)
)
## Plot it
pop_df %>%
mutate(lang = lang %>% factor(ordered = T)) %>%
ggplot(aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
labs(
title = "Comparing statistical languages",
subtitle = "Number of job postings on Indeed.com, 2020/01/12"
) +
scale_fill_manual(
"Free?",
labels = c("True", "False"),
values = c("#116E8A", "slategray")
) +
ggthemes::theme_pander(base_size = 17) +
# theme_ipsum() +
theme(legend.position = "bottom")
?geom_col
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
herwerktecpucore <- data.frame(cores = c("Unknown","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE"), number = c(5,158,139,54,1))
View(herwerktecpucore)
summary(herwerktecpucore)
ggplot(data = herwerktecpucore, aes(x = herwerktecpucore$cores, y = herwerktecpucore$number)) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..)  ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = herwerktecpucore$cores, y = herwerktecpucore$number)) + theme_bw() +
geom_bar(), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = herwerktecpucore$cores, y = herwerktecpucore$number)) + theme_bw() +
geom_bar(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_bar(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores)) + theme_bw() +
geom_bar(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
reorder(lang, -n_jobs)
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
aes(x = c("Unknown","DUAL-CORE","QUAD-CORE","HEXA-CORE","OCTA-CORE"))+
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
herwerktecpucore <- data.frame(cores = c("Unknown","2","4","6","8"), number = c(5,158,139,54,1))
summary(herwerktecpucore)
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "Number of cores") +
ggtitle("cpu_core frequency plot")
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "number of cores") +
ggtitle("cpu_core frequency plot")
5+158+139+54+1
#cpu_core frequency plot manueel om x-as in logische volgorde te hebben
herwerktecpucore <- data.frame(cores = c("Unknown","2","4","6","8"), number = c(5/357,158/357,139/357,54/357,1/357))
summary(herwerktecpucore)
ggplot(data = herwerktecpucore, aes(x = cores, y = number)) + theme_bw() +
geom_col(col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = "number of cores") +
ggtitle("cpu_core frequency plot")
ggplot.point <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point(data_train, data_train$screen_size, "screen_size")
library(vcd)
?cramer
library(vcd)
?assocstats
os
View(data_train)
data_train$cpu_core
cbind(data_train$cpu_core, data_train$cpu_type_name)
assocstats(cbind(data_train$cpu_core, data_train$cpu_type_name))
?cor
assocstats(cbind(data_train$screen_surface, data_train$touchscreen))
data_train$screen_surface, data_train$touchscreen
cbind(data_train$screen_surface, data_train$touchscreen)
assocstats(cbind(data_trainfull$os, data_trainfull$os_details))
head(cbind(data_trainfull$os, data_trainfull$os_details))
View(data_trainfull)
summary(data_trainfull$os)
summary(data_trainfull$os_details)
?assocstats
assocstats(cbind(data_trainfull$os, data_trainfull$os_details)[c(-311,-396),])
head(cbind(data_trainfull$os, data_trainfull$os_details)[c(-311,-396),])
#corr screen surface en touchscreen
assocstats(cbind(data_train$cpu_core, data_train$cpu_type_name))
assocstats(cbind(data_train$screen_surface, data_train$touchscreen))
assocstats(cbind(data_trainfull$os, data_trainfull$os_details)[c(-311,-396),])
assocstats(cbind(data_trainfull$os_details_2, data_trainfull$os_details)[c(-311,-396),])
summary(data_trainfull$os)
summary(data_trainfull$os_details)
assocstats(cbind(data_train$cpu_core, data_train$threading))
assocstats(cbind(data_train$cpu_brand, data_train$cpu_type_name))
###############################################################################################################
#Price difference zoeken
difference <- data_train$max_price-data_train$min_price
difference
plot(difference)
ggplot(data = difference) +
geom_bar() + theme_bw()
###############################################################################################################
#Price difference zoeken
difference <- fortify( data_train$max_price-data_train$min_price )
fortify(difference)
data.frame(difference)
###############################################################################################################
#Price difference zoeken
difference <- data.frame( data_train$max_price-data_train$min_price )
ggplot(data = difference) +
geom_bar() + theme_bw()
ggplot(data = difference, aes(x = difference$data_train.max_price...data_train.min_price)) +
geom_bar() + theme_bw()
###############################################################################################################
#Price difference zoeken
difference <- data.frame( data_train$max_price-data_train$min_price )
ggplot(data = difference) +
geom_bar(aes(x = difference$data_train.max_price...data_train.min_price)) + theme_bw()
###############################################################################################################
#Price difference zoeken
difference <- data.frame( data_train$max_price-data_train$min_price )
ggplot(data = difference) +
geom_histogram(aes(x = difference$data_train.max_price...data_train.min_price)) + theme_bw()
ggplot(data = difference) +
geom_histogram(aes(x = difference$data_train.max_price...data_train.min_price), binwidth = 50) + theme_bw()
data_train <- cbind(data_train,difference)
View(data_train)
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = discrete_gpu, y = data_train.max_price...data_train.min_price))
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = factor(discrete_gpu), y = data_train.max_price...data_train.min_price))
ggplot.point(data_train, data_train$brand, "brand")
ggplot.point2 <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, data_train.max_price...data_train.min_price)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
ggplot.point2(data_train, data_train$brand, "brand")
ggplot.point2(data_train, data_train$screen_size, "screen_size")
ggplot.point2(data_train, data_train$pixels_x, "pixels_x")
ggplot.point2(data_train, data_train$pixels_y, "pixels_y")
ggplot.point2(data_train, data_train$screen_surface, "screen_surface")
ggplot.point2(data_train, data_train$touchscreen, "touchscreen")
ggplot.point2(data_train, data_train$cpu, "cpu")
ggplot.point2(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.point2(data_train, data_train$gpu, "gpu")
ggplot.point2(data_train, data_train$os, "os")
ggplot.point2(data_train, data_train$os_details, "os_details")
ggplot.point2(data_train, data_train$ram, "ram")
ggplot.point2(data_train, data_train$ssd, "ssd")
ggplot.point2(data_train, data_train$storage, "storage")
ggplot.point2(data_train, data_train$weight, "weight")
ggplot.point2(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.point2(data_train, data_train$discrete_gpu, "discrete_gpu")
ggplot.point2(data_train, data_train$cpu_brand, "cpu_brand")
ggplot.point2(data_train, data_train$cpu_type_name, "cpu_type_name")
ggplot.point2(data_train, data_train$gpu_brand, "gpu_brand")
ggplot.point2(data_train, data_train$gpu_type, "gpu_type")
ggplot.point2(data_train, data_train$os_details_2, "os_details_2")
ggplot.point2(data_train, data_train$cpu_details_2, "cpu_details_2")
ggplot.point2(data_train, data_train$pixel, "pixel")
ggplot.point2(data_train, data_train$cpu_type_name, "cpu_type")
ggplot.point2(data_train, data_train$cpu_GHZ, "cpu_GHZ")
ggplot.point2(data_train, data_train$cpu_core, "cpu_core")
ggplot.point2(data_train, data_train$threading, "threading")
ggplot.point2(data_train, data_train$cpu_benchmark, "cpu_benchmark")
ggplot.point2(data_train, data_train$cpu_type_name, "cpu_type")
ggplot.point2(data_train, data_train$cpu_type_name, "cpu_type")
ggplot.point2(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.point2(data_train, data_train$threading, "threading")
ggplot.point2(data_train, data_train$ssd, "ssd")
ggplot.point2(data_train, data_train$gpu_benchmark, "gpu_benchmark")
ggplot.point2(data_train, data_train$gpu_brand, "gpu_brand")
ggplot.point2(data_train, data_train$gpu_type, "gpu_type")
ggplot.point2(data_train, data_train$detachable_keyboard, "detachable keyboard")
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = factor(threading), y = data_train.max_price...data_train.min_price))
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = factor(threading), y = data_train.max_price...data_train.min_price, col=blue))+
labs(x="threading", y="price difference")
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = factor(threading), y = data_train.max_price...data_train.min_price, col=red))+
labs(x="threading", y="price difference")
ggplot(data = data_train) + theme_bw() +
geom_point(aes(x = factor(threading), y = data_train.max_price...data_train.min_price) , col=blue)+
labs(x="threading", y="price difference")
summary(threading)
threading
summary(factor(threading))
summary(factor(threading))/357
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
library(vcd)
#########################################################################################################
#Scatterplot
datacheck <- read.csv('RESULTS.csv', header = TRUE, na.strings = c('NAN','NA'))
View(datacheck)
#########################################################################################################
#Scatterplot
datacheck <- read.csv('concat_df1.csv', header = TRUE, na.strings = c('NAN','NA'))
#########################################################################################################
#Scatterplot
datacheck <- read.csv('testingdata_results.csv', header = TRUE, na.strings = c('NAN','NA'))
#########################################################################################################
#Scatterplot
testresults <- read.csv('testingdata_results.csv', header = TRUE, na.strings = c('NAN','NA'))
View(testresults)
ggplot(testresults, aes(x = testresults$act_min_price, y = testresults$pred_min_price)) +
geom_point() + theme_bw()
?geom_abline
?linetype
ggplot(testresults, aes(x = testresults$act_min_price, y = testresults$pred_min_price)) +
geom_point(color = blue) + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#max_price
ggplot(testresults, aes(x = testresults$act_max_price, y = testresults$pred_max_price)) +
geom_point(color = blue) + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#min_price
ggplot(testresults, aes(x = testresults$act_min_price, y = testresults$pred_min_price, shape = testresults$brand)) +
geom_point(color = blue) + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#min_price
ggplot(testresults, aes(x = testresults$act_min_price, y = testresults$pred_min_price, color = testresults$brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#min_price
ggplot(testresults, aes(x = act_min_price, y = pred_min_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#max_price
ggplot(testresults, aes(x = act_max_price, y = pred_max_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
?abs
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
library(vcd)
blue <- "#1E90FF"
red <- "#CC0000"
ggplot.point2 <- function(DT, variable, xlab){
ggplot(data_train, aes(variable, data_train$differences)) +
geom_point(col=blue) + labs(x=xlab) +
theme_bw()
}
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_min_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw()+
abline(320)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_min_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw()+
abline(320)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 320, slope = 0, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = cpu_core)) +
geom_point() + theme_bw() +
geom_abline(intercept = 320, slope = 0, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = cpu_core)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2)
library(tidyverse)
library(stringr)
library(corrr)
library(ggcorrplot)
library(gridExtra)
library(vcd)
library(MASS)
library(vcd)
blue <- "#1E90FF"
red <- "#CC0000"
#Make sure you have data_train from the "main" file.
data_train <- read.csv('trainingdata.csv', header = TRUE, na.strings = c('NAN','NA'))
attach(data_train)
difference <- data.frame( data_train$max_price-data_train$min_price )
names(difference) <- "differences"
data_train <- cbind(data_train,difference)
##Lets start with some basic plots.
#Frequency plots
ggplot.bar <- function(DT, variable, xlab){
ggplot(data = DT, aes(as.factor(variable))) + theme_bw() +
geom_bar(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75,) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
ggplot.hist <- function(DT, variable, xlab){
ggplot(data = DT, aes(variable)) + theme_bw() +
geom_histogram(aes(y = (..count..)/sum(..count..) ), col = blue, fill = blue, alpha = 0.75, bins = 20) +
labs(y= "Abs frequency", x = xlab) +
ggtitle(paste(xlab,"frequency plot"))
}
#########################################################################################################
#Scatterplot
testresults <- read.csv('testingdata_results.csv', header = TRUE, na.strings = c('NAN','NA'))
#min_price
ggplot(testresults, aes(x = act_min_price, y = pred_min_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#max_price
ggplot(testresults, aes(x = act_max_price, y = pred_max_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = cpu_core)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2)
View(data_train)
ggplot(data_train, aes(x = cpu_GHZ, y = cpu_core)) + theme_bw() +
geom_jitter()
#########################################################################################################
#Scatterplot
testresults <- read.csv('testingdata_results.csv', header = TRUE, na.strings = c('NAN','NA'))
#min_price
ggplot(testresults, aes(x = act_min_price, y = pred_min_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#max_price
ggplot(testresults, aes(x = act_max_price, y = pred_max_price, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 0, slope = 1, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2)
#Mean Summed Absolute Error
ggplot(testresults, aes(x = act_max_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2) +
labs(title = "MSAE of every instance", x = "actual maximum price", y = "MSAE")
ggplot(testresults, aes(x = act_min_price, y = (abs(pred_max_price-act_max_price) + abs(pred_min_price-act_min_price))/2, color = brand)) +
geom_point() + theme_bw() +
geom_abline(intercept = 310, slope = 0, linetype = 2) +
labs(title = "MSAE of every instance", x = "actual maximum price", y = "MSAE")
##########################################################################################################
#Why lenovo and asus
Originaltrainset <- read.csv('datafile2.csv', header = TRUE, na.strings = c('NAN','NA'))
lenovo <- Originaltrainset[which(Originaltrainset$brand = lenovo),]
View(Originaltrainset)
lenovo <- Originaltrainset[which(Originaltrainset$brand = "LENOVO"),]
lenovo <- Originaltrainset[which(Originaltrainset$brand == "LENOVO"),]
View(lenovo)
ggplot(lenovo, aes(x = min_price, y = pc_name)) + theme_bw() +
geom_point()
ggplot(lenovo, aes(x = cpu_benchmark, y = pc_name)) + theme_bw() +
geom_point()
ggplot(lenovo, aes(x = cpu_benchmark, y = gpu_benchmark, color = max_price)) + theme_bw() +
geom_point()
asus <- Originaltrainset[which(Originaltrainset$brand == "ASUS"),]
ggplot(lenovo, aes(x = cpu_benchmark, y = gpu_benchmark, color = max_price)) + theme_bw() +
geom_point()
ggplot(lenovo, aes(x = max_price, y = pc_name, color = max_price)) + theme_bw() +
geom_point()
ggplot(asus, aes(x = max_price, y = pc_name, color = max_price)) + theme_bw() +
geom_point()
lenovo <- Originaltrainset[which(Originaltrainset$brand == "LENOVO"),]
ggplot(lenovo, aes(x = max_price, y = pc_name, color = max_price)) + theme_bw() +
geom_point()
